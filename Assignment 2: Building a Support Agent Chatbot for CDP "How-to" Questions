<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CDP Support Agent Chatbot</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
    <style>
        body { background-color: #f5f5f5; }
        .chatbot-container {
            width: 50%;
            margin: 40px auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            background-color: #fff;
        }
        .chat-messages { max-height: 300px; overflow-y: auto; margin-bottom: 10px; }
        .message { padding: 10px; margin-bottom: 5px; border-radius: 5px; }
        .user-message { background-color: #007bff; color: white; text-align: right; }
        .bot-message { background-color: #ddd; text-align: left; }
    </style>
</head>
<body>
    <div class="chatbot-container">
        <h2 class="title">CDP Support Agent Chatbot</h2>
        <div id="chat-messages" class="chat-messages"></div>
        <input type="text" id="chatbot-input" class="input" placeholder="Ask a question...">
        <button class="button is-primary" id="chatbot-submit">Submit</button>
    </div>

    <script>
        const chatbotInput = document.getElementById('chatbot-input');
        const chatbotSubmit = document.getElementById('chatbot-submit');
        const chatMessages = document.getElementById('chat-messages');

        const cdpDocumentation = {
            segment: 'https://segment.com/docs/?ref=nav',
            mParticle: 'https://docs.mparticle.com/',
            lytics: 'https://docs.lytics.com/',
            zeotap: 'https://docs.zeotap.com/home/en-us/'
        };

        function addMessage(text, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
            messageDiv.innerHTML = text;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function getResponse(question) {
            const lowerQuestion = question.toLowerCase();
            
            for (const key in cdpDocumentation) {
                if (lowerQuestion.includes(key)) {
                    return `You can find the answer in the <a href="${cdpDocumentation[key]}" target="_blank">${key} documentation</a>.`;
                }
            }
            
            if (lowerQuestion.includes("compare")) {
                return `For a comparison between CDPs, you may need to check individual documentation: 
                    <a href="${cdpDocumentation.segment}" target="_blank">Segment</a>, 
                    <a href="${cdpDocumentation.mParticle}" target="_blank">mParticle</a>, 
                    <a href="${cdpDocumentation.lytics}" target="_blank">Lytics</a>, 
                    <a href="${cdpDocumentation.zeotap}" target="_blank">Zeotap</a>.`;
            }
            
            return "Sorry, I couldn't find the answer. Please check the documentation links above.";
        }

        chatbotSubmit.addEventListener('click', () => {
            const question = chatbotInput.value.trim();
            if (!question) return;

            addMessage(question, true);
            setTimeout(() => addMessage(getResponse(question), false), 500);

            chatbotInput.value = '';
        });

        chatbotInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') chatbotSubmit.click();
        });
    </script>
</body>
</html>
